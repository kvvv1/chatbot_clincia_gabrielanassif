"""
Teste da integra√ß√£o robusta com API - verifica se estados s√£o mantidos durante falhas
"""
import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.services.conversation import ConversationManager
from app.models.database import get_db, Conversation
from datetime import datetime

async def test_falha_api_dias():
    """Testa comportamento quando API de dias falha"""
    manager = ConversationManager()
    db = next(get_db())
    phone = "5511888888888"
    
    print("üß™ TESTANDO FALHA NA API DE DIAS DISPON√çVEIS\n")
    print("=" * 60)
    
    # Limpar conversas antigas
    try:
        conv_antiga = db.query(Conversation).filter_by(phone=phone).first()
        if conv_antiga:
            db.delete(conv_antiga)
            db.commit()
    except:
        pass
    
    # 1. Iniciar fluxo normal
    print("1Ô∏è‚É£ INICIANDO FLUXO NORMAL")
    print("-" * 40)
    await manager.processar_mensagem(phone, "oi", "msg1", db)
    await manager.processar_mensagem(phone, "1", "msg2", db)
    
    conversa = manager._get_or_create_conversation(phone, db)
    print(f"   ‚úÖ Estado: {conversa.state}")
    print(f"   ‚úÖ Contexto: {conversa.context}")
    assert conversa.state == "aguardando_cpf"
    assert conversa.context.get('acao') == 'agendar'
    print("   ‚úÖ Fluxo iniciado corretamente!\n")
    
    # 2. Simular paciente v√°lido primeiro
    print("2Ô∏è‚É£ SIMULANDO PACIENTE V√ÅLIDO")
    print("-" * 40)
    
    # Mock da API de paciente para retornar paciente v√°lido
    paciente_mock = {
        "nome": "Jo√£o Silva",
        "cpf": "12345678901",
        "id": "123"
    }
    original_buscar_paciente = manager.gestaods.buscar_paciente_cpf
    async def api_paciente_mock(cpf):
        return paciente_mock
    manager.gestaods.buscar_paciente_cpf = api_paciente_mock
    
    # Enviar CPF v√°lido (vai encontrar paciente)
    await manager.processar_mensagem(phone, "12345678901", "msg3", db)
    
    conversa = manager._get_or_create_conversation(phone, db)
    print(f"   ‚úÖ Estado ap√≥s CPF: {conversa.state}")
    print(f"   ‚úÖ Paciente encontrado: {conversa.context.get('paciente', {}).get('nome')}")
    
    # 3. Agora simular falha na API de dias
    print("\n3Ô∏è‚É£ SIMULANDO FALHA NA API DE DIAS")
    print("-" * 40)
    
    # Mock da API de dias para falhar
    original_buscar_dias = manager.gestaods.buscar_dias_disponiveis
    async def api_dias_falha():
        return None
    manager.gestaods.buscar_dias_disponiveis = api_dias_falha
    
    # Como j√° temos o paciente, vamos adicionar ao contexto e triggerar o agendamento
    conversa.context['paciente'] = paciente_mock
    db.commit()
    await manager._iniciar_agendamento(phone, paciente_mock, conversa, db)
    
    conversa = manager._get_or_create_conversation(phone, db)
    print(f"   ‚úÖ Estado ap√≥s falha: {conversa.state}")
    print(f"   ‚úÖ Contexto preservado: {conversa.context}")
    
    # Verifica√ß√µes cr√≠ticas
    assert conversa.state == "agendamento_sem_dias", f"Estado deveria ser 'agendamento_sem_dias', mas √© '{conversa.state}'"
    assert conversa.context.get('acao') == 'agendar', "Contexto deve manter a√ß√£o 'agendar'"
    assert 'paciente' in conversa.context, "Paciente deve estar no contexto"
    
    print("   ‚úÖ CONTEXTO PRESERVADO ap√≥s falha da API!\n")
    
    # 4. Testar recupera√ß√£o
    print("4Ô∏è‚É£ TESTANDO RECUPERA√á√ÉO")
    print("-" * 40)
    
    # Restaurar API e tentar novamente
    manager.gestaods.buscar_dias_disponiveis = original_buscar_dias
    
    # Escolher op√ß√£o "1" (tentar novamente)
    await manager.processar_mensagem(phone, "1", "msg4", db)
    
    conversa = manager._get_or_create_conversation(phone, db)
    print(f"   ‚úÖ Estado ap√≥s recupera√ß√£o: {conversa.state}")
    print(f"   ‚úÖ Contexto mantido: {conversa.context}")
    
    # Deve ter ido para escolha de data ou algum estado v√°lido
    assert conversa.state != "menu_principal", "N√£o deve voltar ao menu durante recupera√ß√£o"
    assert conversa.context.get('acao') == 'agendar', "A√ß√£o deve ser mantida"
    
    # Restaurar API de paciente tamb√©m
    manager.gestaods.buscar_paciente_cpf = original_buscar_paciente
    
    print("   ‚úÖ RECUPERA√á√ÉO FUNCIONANDO!\n")
    
    print("=" * 60)
    print("‚úÖ TESTE DE FALHA DA API PASSOU!")
    print("‚úÖ Estados s√£o preservados durante falhas!")

async def test_falha_api_horarios():
    """Testa comportamento quando API de hor√°rios falha"""
    manager = ConversationManager()
    db = next(get_db())
    phone = "5511777777777"
    
    print("\nüß™ TESTANDO FALHA NA API DE HOR√ÅRIOS\n")
    print("=" * 60)
    
    # Criar conversa em estado espec√≠fico
    conversa = Conversation(
        phone=phone,
        state="escolhendo_data",
        context={
            "acao": "agendar",
            "paciente": {"nome": "Jo√£o", "cpf": "12345678901"},
            "dias_disponiveis": [
                {"data": "2024-01-15", "disponivel": True}
            ]
        }
    )
    db.add(conversa)
    db.commit()
    
    print("1Ô∏è‚É£ SIMULANDO FALHA NA API DE HOR√ÅRIOS")
    print("-" * 40)
    
    # Mock da API de hor√°rios para falhar
    original_buscar_horarios = manager.gestaods.buscar_horarios_disponiveis
    async def api_horarios_falha(data):
        return None
    manager.gestaods.buscar_horarios_disponiveis = api_horarios_falha
    
    # Escolher data (vai tentar buscar hor√°rios e falhar)
    await manager.processar_mensagem(phone, "1", "msg1", db)
    
    conversa = manager._get_or_create_conversation(phone, db)
    print(f"   ‚úÖ Estado ap√≥s falha: {conversa.state}")
    print(f"   ‚úÖ Contexto: {conversa.context}")
    
    # Verifica√ß√µes
    assert conversa.state == "data_sem_horarios", f"Estado deveria ser 'data_sem_horarios', mas √© '{conversa.state}'"
    assert conversa.context.get('acao') == 'agendar', "A√ß√£o deve ser preservada"
    
    print("   ‚úÖ CONTEXTO PRESERVADO ap√≥s falha de hor√°rios!\n")
    
    # Restaurar API
    manager.gestaods.buscar_horarios_disponiveis = original_buscar_horarios
    
    print("‚úÖ TESTE DE FALHA DE HOR√ÅRIOS PASSOU!")

async def test_persistencia_durante_requests():
    """Testa se estados s√£o mantidos durante requisi√ß√µes longas"""
    manager = ConversationManager()
    db = next(get_db())
    phone = "5511666666666"
    
    print("\nüß™ TESTANDO PERSIST√äNCIA DURANTE REQUISI√á√ïES\n")
    print("=" * 60)
    
    # Simular API lenta
    async def api_lenta():
        await asyncio.sleep(0.5)  # Simular demora
        return [{"data": "2024-01-15", "disponivel": True}]
    
    original_buscar_dias = manager.gestaods.buscar_dias_disponiveis
    manager.gestaods.buscar_dias_disponiveis = api_lenta
    
    print("1Ô∏è‚É£ INICIANDO FLUXO COM API LENTA")
    print("-" * 40)
    
    # Iniciar fluxo
    await manager.processar_mensagem(phone, "oi", "msg1", db)
    await manager.processar_mensagem(phone, "1", "msg2", db)
    
    # Durante a API lenta, verificar se estado √© mantido
    conversa = manager._get_or_create_conversation(phone, db)
    estado_antes = conversa.state
    contexto_antes = conversa.context.copy()
    
    print(f"   üìù Estado antes da API: {estado_antes}")
    print(f"   üìù Contexto antes: {contexto_antes}")
    
    # Processar CPF (vai chamar API lenta)
    await manager.processar_mensagem(phone, "12345678901", "msg3", db)
    
    # Verificar se estado foi mantido
    conversa = manager._get_or_create_conversation(phone, db)
    print(f"   ‚úÖ Estado ap√≥s API: {conversa.state}")
    print(f"   ‚úÖ Contexto ap√≥s: {conversa.context}")
    
    assert conversa.context.get('acao') == 'agendar', "A√ß√£o deve ser mantida durante API lenta"
    
    # Restaurar API
    manager.gestaods.buscar_dias_disponiveis = original_buscar_dias
    
    print("   ‚úÖ PERSIST√äNCIA DURANTE REQUISI√á√ïES OK!\n")
    
    print("‚úÖ TODOS OS TESTES DE INTEGRA√á√ÉO PASSARAM!")

if __name__ == "__main__":
    print("\nüöÄ INICIANDO TESTES DE INTEGRA√á√ÉO ROBUSTA COM API\n")
    
    try:
        # Teste de falha de dias
        asyncio.run(test_falha_api_dias())
        
        # Teste de falha de hor√°rios
        asyncio.run(test_falha_api_horarios())
        
        # Teste de persist√™ncia
        asyncio.run(test_persistencia_durante_requests())
        
        print("\nüéâ SUCESSO TOTAL!")
        print("üìù A integra√ß√£o com API agora √© ROBUSTA!")
        print("üîí Estados s√£o preservados mesmo com falhas!")
        
    except AssertionError as e:
        print(f"\n‚ùå ERRO NO TESTE: {e}")
        print("‚ö†Ô∏è  Verifique se as corre√ß√µes foram aplicadas!")
    except Exception as e:
        print(f"\n‚ùå ERRO INESPERADO: {e}")
        import traceback
        traceback.print_exc()