"""
Teste do fluxo de confirma√ß√£o de paciente - verifica se est√° alinhado com os exemplos
"""
import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.services.conversation import ConversationManager
from app.models.database import get_db, Conversation
from datetime import datetime

async def test_confirmacao_paciente():
    """Testa o fluxo completo de confirma√ß√£o de paciente"""
    manager = ConversationManager()
    db = next(get_db())
    phone = "5511999888777"
    
    print("üß™ TESTANDO FLUXO DE CONFIRMA√á√ÉO DE PACIENTE\n")
    print("=" * 60)
    
    # Limpar conversas antigas
    try:
        conv_antiga = db.query(Conversation).filter_by(phone=phone).first()
        if conv_antiga:
            db.delete(conv_antiga)
            db.commit()
    except:
        pass
    
    # Mock da API de paciente para retornar paciente v√°lido
    # Usar CPF v√°lido real: 11144477735
    cpf_valido = "11144477735"
    paciente_mock = {
        "nome": "Jo√£o Silva",
        "cpf": cpf_valido,
        "id": "123"
    }
    original_buscar_paciente = manager.gestaods.buscar_paciente_cpf
    async def api_paciente_mock(cpf):
        return paciente_mock
    manager.gestaods.buscar_paciente_cpf = api_paciente_mock
    
    # 1. Iniciar conversa
    print("1Ô∏è‚É£ INICIANDO CONVERSA")
    print("-" * 40)
    await manager.processar_mensagem(phone, "oi", "msg1", db)
    conversa = manager._get_or_create_conversation(phone, db)
    print(f"   ‚úÖ Estado: {conversa.state}")
    assert conversa.state == "menu_principal"
    print("   ‚úÖ Menu mostrado\n")
    
    # 2. Escolher op√ß√£o 1 (Agendar)
    print("2Ô∏è‚É£ ESCOLHENDO OP√á√ÉO 1 (Agendar)")
    print("-" * 40)
    await manager.processar_mensagem(phone, "1", "msg2", db)
    conversa = manager._get_or_create_conversation(phone, db)
    print(f"   ‚úÖ Estado: {conversa.state}")
    print(f"   ‚úÖ Contexto: {conversa.context}")
    assert conversa.state == "aguardando_cpf"
    assert conversa.context.get('acao') == 'agendar'
    print("   ‚úÖ Aguardando CPF\n")
    
    # 3. Enviar CPF v√°lido
    print("3Ô∏è‚É£ ENVIANDO CPF V√ÅLIDO")
    print("-" * 40)
    print(f"   üìù Debug: Enviando CPF v√°lido: {cpf_valido}")
    await manager.processar_mensagem(phone, cpf_valido, "msg3", db)
    conversa = manager._get_or_create_conversation(phone, db)
    print(f"   ‚úÖ Estado: {conversa.state}")
    print(f"   ‚úÖ Contexto: {conversa.context}")
    print(f"   üìù Debug: Paciente encontrado: {conversa.context.get('paciente_temp', 'N√£o encontrado')}")
    
    # Verificar se entrou em confirma√ß√£o
    assert conversa.state == "confirmando_paciente", f"Estado deveria ser 'confirmando_paciente', mas √© '{conversa.state}'"
    assert 'paciente_temp' in conversa.context, "Deve ter paciente_temp no contexto"
    assert conversa.context['paciente_temp']['nome'] == "Jo√£o Silva", "Nome do paciente deve estar correto"
    
    print("   ‚úÖ Paciente encontrado, aguardando confirma√ß√£o!\n")
    
    # 4. Confirmar paciente (op√ß√£o 1)
    print("4Ô∏è‚É£ CONFIRMANDO PACIENTE (Op√ß√£o 1)")
    print("-" * 40)
    await manager.processar_mensagem(phone, "1", "msg4", db)
    conversa = manager._get_or_create_conversation(phone, db)
    print(f"   ‚úÖ Estado: {conversa.state}")
    print(f"   ‚úÖ Contexto: {conversa.context}")
    
    # Verificar se o paciente foi confirmado e o fluxo continuou
    assert 'paciente' in conversa.context, "Paciente deve estar confirmado no contexto"
    assert 'paciente_temp' not in conversa.context, "paciente_temp deve ter sido removido"
    assert conversa.context['paciente']['nome'] == "Jo√£o Silva", "Paciente confirmado deve ter nome correto"
    assert conversa.context.get('acao') == 'agendar', "A√ß√£o deve ser mantida"
    
    print("   ‚úÖ Paciente confirmado e fluxo continuou!\n")
    
    print("=" * 60)
    print("‚úÖ TESTE DE CONFIRMA√á√ÉO DE PACIENTE PASSOU!")
    print("‚úÖ Fluxo agora est√° alinhado com os exemplos!")

async def test_rejeicao_paciente():
    """Testa quando usu√°rio rejeita o paciente encontrado"""
    manager = ConversationManager()
    db = next(get_db())
    phone = "5511777666555"
    
    print("\nüß™ TESTANDO REJEI√á√ÉO DE PACIENTE\n")
    print("=" * 60)
    
    # Limpar conversas antigas
    try:
        conv_antiga = db.query(Conversation).filter_by(phone=phone).first()
        if conv_antiga:
            db.delete(conv_antiga)
            db.commit()
    except:
        pass
    
    # Mock da API
    paciente_mock = {
        "nome": "Maria Santos",
        "cpf": "98765432100",
        "id": "456"
    }
    async def api_paciente_mock(cpf):
        return paciente_mock
    manager.gestaods.buscar_paciente_cpf = api_paciente_mock
    
    # Setup inicial
    conversa = Conversation(
        phone=phone,
        state="confirmando_paciente",
        context={
            "acao": "agendar",
            "paciente_temp": paciente_mock
        }
    )
    db.add(conversa)
    db.commit()
    
    print("1Ô∏è‚É£ REJEITANDO PACIENTE (Op√ß√£o 2)")
    print("-" * 40)
    await manager.processar_mensagem(phone, "2", "msg1", db)
    
    conversa = manager._get_or_create_conversation(phone, db)
    print(f"   ‚úÖ Estado: {conversa.state}")
    print(f"   ‚úÖ Contexto: {conversa.context}")
    
    # Verificar se voltou para aguardar CPF
    assert conversa.state == "aguardando_cpf", f"Estado deveria ser 'aguardando_cpf', mas √© '{conversa.state}'"
    assert 'paciente_temp' not in conversa.context, "paciente_temp deve ter sido removido"
    assert conversa.context.get('acao') == 'agendar', "A√ß√£o deve ser mantida"
    
    print("   ‚úÖ Voltou para aguardar CPF corretamente!\n")
    
    print("‚úÖ TESTE DE REJEI√á√ÉO PASSOU!")

async def test_formatacao_cpf():
    """Testa formata√ß√£o de CPF"""
    manager = ConversationManager()
    
    print("\nüß™ TESTANDO FORMATA√á√ÉO DE CPF\n")
    print("=" * 60)
    
    # Testar formata√ß√£o
    cpf_formatado = manager._formatar_cpf_display("12345678901")
    print(f"CPF: 12345678901 ‚Üí {cpf_formatado}")
    assert cpf_formatado == "123.456.789-01", f"Formata√ß√£o incorreta: {cpf_formatado}"
    
    # Testar com CPF j√° formatado
    cpf_formatado2 = manager._formatar_cpf_display("123.456.789-01")
    print(f"CPF: 123.456.789-01 ‚Üí {cpf_formatado2}")
    assert cpf_formatado2 == "123.456.789-01", f"Formata√ß√£o incorreta: {cpf_formatado2}"
    
    # Testar CPF inv√°lido
    cpf_formatado3 = manager._formatar_cpf_display("123456")
    print(f"CPF: 123456 ‚Üí {cpf_formatado3}")
    assert cpf_formatado3 == "123456", f"CPF inv√°lido deve retornar original: {cpf_formatado3}"
    
    print("   ‚úÖ Formata√ß√£o de CPF funcionando corretamente!\n")
    
    print("‚úÖ TESTE DE FORMATA√á√ÉO PASSOU!")

if __name__ == "__main__":
    print("\nüöÄ INICIANDO TESTES DE CONFIRMA√á√ÉO DE PACIENTE\n")
    
    try:
        # Teste principal
        asyncio.run(test_confirmacao_paciente())
        
        # Teste de rejei√ß√£o
        asyncio.run(test_rejeicao_paciente())
        
        # Teste de formata√ß√£o
        asyncio.run(test_formatacao_cpf())
        
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("üìù O fluxo agora est√° 100% alinhado com os exemplos!")
        print("‚úÖ Confirma√ß√£o de paciente implementada com sucesso!")
        
    except AssertionError as e:
        print(f"\n‚ùå ERRO NO TESTE: {e}")
        print("‚ö†Ô∏è  Verifique se as corre√ß√µes foram aplicadas corretamente!")
    except Exception as e:
        print(f"\n‚ùå ERRO INESPERADO: {e}")
        import traceback
        traceback.print_exc()