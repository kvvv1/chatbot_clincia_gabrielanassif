#!/usr/bin/env python3
"""
Script de diagn√≥stico para o problema com mensagem "oi"
"""

import asyncio
import logging
import sys
import os
from datetime import datetime

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services.conversation import ConversationManager
from app.models.database import get_db, Conversation
from app.config import settings

# Configurar logging detalhado
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(f'diagnostico_oi_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')
    ]
)

logger = logging.getLogger(__name__)

async def test_mensagem_oi():
    """Testa especificamente o processamento da mensagem 'oi'"""
    
    print("üîç === DIAGN√ìSTICO MENSAGEM 'OI' ===")
    print(f"‚è∞ Timestamp: {datetime.now()}")
    print(f"üåç Environment: {settings.environment}")
    print(f"üè• Clinic Name: {settings.clinic_name}")
    print()
    
    try:
        # 1. Testar inicializa√ß√£o do ConversationManager
        print("1Ô∏è‚É£ Testando inicializa√ß√£o do ConversationManager...")
        conversation_manager = ConversationManager()
        print("‚úÖ ConversationManager inicializado com sucesso")
        print()
        
        # 2. Testar NLU Processor
        print("2Ô∏è‚É£ Testando NLU Processor...")
        nlu_result = conversation_manager.nlu.process_message("oi")
        print(f"‚úÖ NLU Result: {nlu_result}")
        print()
        
        # 3. Testar WhatsApp Service
        print("3Ô∏è‚É£ Testando WhatsApp Service...")
        print(f"‚úÖ WhatsApp Service inicializado: {conversation_manager.whatsapp}")
        print()
        
        # 4. Testar banco de dados
        print("4Ô∏è‚É£ Testando conex√£o com banco de dados...")
        db = get_db()
        print("‚úÖ Conex√£o com banco estabelecida")
        print()
        
        # 5. Testar cria√ß√£o de conversa
        print("5Ô∏è‚É£ Testando cria√ß√£o de conversa...")
        phone = "5511999999999"  # N√∫mero de teste
        conversa = conversation_manager._get_or_create_conversation(phone, db)
        print(f"‚úÖ Conversa criada/encontrada: {conversa.id}")
        print(f"   Estado: {conversa.state}")
        print(f"   Contexto: {conversa.context}")
        print()
        
        # 6. Testar processamento completo
        print("6Ô∏è‚É£ Testando processamento completo da mensagem 'oi'...")
        
        # Simular dados do webhook
        message_data = {
            "phone": phone,
            "text": {"message": "oi"},
            "messageId": "test_message_id_123",
            "fromMe": False
        }
        
        # Processar mensagem
        await conversation_manager.processar_mensagem(
            phone=phone,
            message="oi",
            message_id="test_message_id_123",
            db=db
        )
        
        print("‚úÖ Processamento conclu√≠do sem erros!")
        print()
        
        # 7. Verificar estado final
        print("7Ô∏è‚É£ Verificando estado final...")
        db.refresh(conversa)
        print(f"‚úÖ Estado final: {conversa.state}")
        print(f"‚úÖ Contexto final: {conversa.context}")
        print()
        
        print("üéâ === DIAGN√ìSTICO CONCLU√çDO COM SUCESSO ===")
        
    except Exception as e:
        print(f"‚ùå ERRO NO DIAGN√ìSTICO: {str(e)}")
        print(f"üìã Tipo do erro: {type(e).__name__}")
        print(f"üîç Stack trace:")
        import traceback
        traceback.print_exc()
        
        # Tentar identificar o problema espec√≠fico
        if "import" in str(e).lower():
            print("\nüîß PROBLEMA IDENTIFICADO: Erro de importa√ß√£o")
            print("   Verifique se todos os m√≥dulos est√£o dispon√≠veis")
        elif "database" in str(e).lower() or "connection" in str(e).lower():
            print("\nüîß PROBLEMA IDENTIFICADO: Erro de banco de dados")
            print("   Verifique a configura√ß√£o do Supabase")
        elif "whatsapp" in str(e).lower() or "zapi" in str(e).lower():
            print("\nüîß PROBLEMA IDENTIFICADO: Erro do WhatsApp/Z-API")
            print("   Verifique as configura√ß√µes do Z-API")
        else:
            print("\nüîß PROBLEMA IDENTIFICADO: Erro gen√©rico")
            print("   Verifique os logs para mais detalhes")

async def test_webhook_simulation():
    """Simula o processamento do webhook"""
    
    print("\nüîç === TESTE SIMULA√á√ÉO WEBHOOK ===")
    
    try:
        from app.handlers.webhook import process_message_event
        
        # Dados simulados do webhook
        webhook_data = {
            "type": "ReceivedCallback",
            "phone": "5511999999999@c.us",
            "text": {"message": "oi"},
            "messageId": "webhook_test_123",
            "fromMe": False
        }
        
        print("üì• Processando dados do webhook...")
        await process_message_event(webhook_data)
        print("‚úÖ Webhook processado com sucesso!")
        
    except Exception as e:
        print(f"‚ùå ERRO NO WEBHOOK: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üöÄ Iniciando diagn√≥stico do chatbot...")
    print("=" * 50)
    
    # Executar testes
    asyncio.run(test_mensagem_oi())
    asyncio.run(test_webhook_simulation())
    
    print("\n" + "=" * 50)
    print("üèÅ Diagn√≥stico finalizado!") 