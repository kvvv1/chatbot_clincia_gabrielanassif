#!/usr/bin/env python3
"""
Script de teste para a nova implementa√ß√£o da API do Gest√£oDS
Baseado na especifica√ß√£o OpenAPI fornecida
"""

import asyncio
import os
import sys
from datetime import datetime, timedelta

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services.gestaods import GestaoDS
from app.config import settings

async def test_gestaods_api():
    """Testa todos os endpoints da API do Gest√£oDS"""
    
    print("üß™ TESTANDO NOVA API DO GEST√ÉODS")
    print("=" * 50)
    
    # Configurar vari√°veis de ambiente se n√£o estiverem definidas
    if not hasattr(settings, 'gestaods_api_url') or not settings.gestaods_api_url:
        os.environ['GESTAODS_API_URL'] = 'https://apidev.gestaods.com.br'
    
    if not hasattr(settings, 'gestaods_token') or not settings.gestaods_token:
        os.environ['GESTAODS_TOKEN'] = '733a8e19a94b65d58390da380ac946b6d603a535'
    
    gestaods = GestaoDS()
    
    print(f"üîó URL Base: {gestaods.base_url}")
    print(f"üîë Token: {gestaods.token[:10]}...")
    print()
    
    # Teste 1: Buscar paciente por CPF
    print("1Ô∏è‚É£ Testando busca de paciente por CPF...")
    cpf_teste = "12345678901"  # CPF de teste
    
    try:
        paciente = await gestaods.buscar_paciente_cpf(cpf_teste)
        if paciente:
            print(f"‚úÖ Paciente encontrado: {paciente}")
        else:
            print("‚ÑπÔ∏è Paciente n√£o encontrado (esperado para CPF de teste)")
    except Exception as e:
        print(f"‚ùå Erro ao buscar paciente: {str(e)}")
    
    print()
    
    # Teste 2: Buscar dias dispon√≠veis
    print("2Ô∏è‚É£ Testando busca de dias dispon√≠veis...")
    try:
        dias = await gestaods.buscar_dias_disponiveis()
        if dias:
            print(f"‚úÖ Dias dispon√≠veis encontrados: {len(dias)} dias")
            # Mostrar apenas os primeiros 3 dias
            for i in range(min(3, len(dias))):
                try:
                    print(f"   {i+1}. {str(dias[i])}")
                except Exception as e:
                    print(f"   {i+1}. [Erro ao exibir dia: {str(e)}]")
        else:
            print("‚ÑπÔ∏è Nenhum dia dispon√≠vel encontrado")
    except Exception as e:
        print(f"‚ùå Erro ao buscar dias dispon√≠veis: {str(e)}")
    
    print()
    
    # Teste 3: Buscar hor√°rios dispon√≠veis
    print("3Ô∏è‚É£ Testando busca de hor√°rios dispon√≠veis...")
    try:
        # Usar data de hoje formatada
        data_hoje = datetime.now().strftime("%d/%m/%Y")
        horarios = await gestaods.buscar_horarios_disponiveis(data_hoje)
        if horarios:
            print(f"‚úÖ Hor√°rios dispon√≠veis encontrados: {len(horarios)} hor√°rios")
            # Mostrar apenas os primeiros 3 hor√°rios
            for i in range(min(3, len(horarios))):
                try:
                    print(f"   {i+1}. {str(horarios[i])}")
                except Exception as e:
                    print(f"   {i+1}. [Erro ao exibir hor√°rio: {str(e)}]")
        else:
            print("‚ÑπÔ∏è Nenhum hor√°rio dispon√≠vel encontrado")
    except Exception as e:
        print(f"‚ùå Erro ao buscar hor√°rios dispon√≠veis: {str(e)}")
    
    print()
    
    # Teste 4: Retornar fuso hor√°rio
    print("4Ô∏è‚É£ Testando busca de fuso hor√°rio...")
    try:
        fuso = await gestaods.retornar_fuso_horario()
        if fuso:
            print(f"‚úÖ Fuso hor√°rio: {fuso}")
        else:
            print("‚ÑπÔ∏è Fuso hor√°rio n√£o encontrado")
    except Exception as e:
        print(f"‚ùå Erro ao buscar fuso hor√°rio: {str(e)}")
    
    print()
    
    # Teste 5: Buscar dados do agendamento
    print("5Ô∏è‚É£ Testando busca de dados do agendamento...")
    try:
        dados = await gestaods.buscar_dados_agendamento()
        if dados:
            print(f"‚úÖ Dados do agendamento: {dados}")
        else:
            print("‚ÑπÔ∏è Dados do agendamento n√£o encontrados")
    except Exception as e:
        print(f"‚ùå Erro ao buscar dados do agendamento: {str(e)}")
    
    print()
    
    # Teste 6: Listar agendamentos por per√≠odo
    print("6Ô∏è‚É£ Testando listagem de agendamentos por per√≠odo...")
    try:
        data_inicial = (datetime.now() - timedelta(days=30)).strftime("%d/%m/%Y")
        data_final = (datetime.now() + timedelta(days=30)).strftime("%d/%m/%Y")
        
        agendamentos = await gestaods.listar_agendamentos_periodo(data_inicial, data_final)
        if agendamentos:
            print(f"‚úÖ Agendamentos encontrados: {len(agendamentos)} agendamentos")
            # Mostrar apenas os primeiros 3 agendamentos
            for i in range(min(3, len(agendamentos))):
                try:
                    print(f"   {i+1}. {str(agendamentos[i])}")
                except Exception as e:
                    print(f"   {i+1}. [Erro ao exibir agendamento: {str(e)}]")
        else:
            print("‚ÑπÔ∏è Nenhum agendamento encontrado no per√≠odo")
    except Exception as e:
        print(f"‚ùå Erro ao listar agendamentos: {str(e)}")
    
    print()
    
    # Teste 7: Testar formata√ß√£o de data/hora
    print("7Ô∏è‚É£ Testando formata√ß√£o de data/hora...")
    try:
        data_teste = "2024-01-15 14:30:00"
        data_formatada = gestaods.formatar_data_hora(data_teste)
        print(f"‚úÖ Data original: {data_teste}")
        print(f"‚úÖ Data formatada: {data_formatada}")
        
        data_simples = "2024-01-15"
        data_formatada_simples = gestaods.formatar_data(data_simples)
        print(f"‚úÖ Data simples original: {data_simples}")
        print(f"‚úÖ Data simples formatada: {data_formatada_simples}")
    except Exception as e:
        print(f"‚ùå Erro na formata√ß√£o: {str(e)}")
    
    print()
    
    # Teste 8: Testar endpoint de desenvolvimento
    print("8Ô∏è‚É£ Testando endpoint de desenvolvimento...")
    try:
        paciente_dev = await gestaods.dev_buscar_paciente_cpf(cpf_teste)
        if paciente_dev:
            print(f"‚úÖ Paciente encontrado (dev): {paciente_dev}")
        else:
            print("‚ÑπÔ∏è Paciente n√£o encontrado (dev) - esperado para CPF de teste")
    except Exception as e:
        print(f"‚ùå Erro ao buscar paciente (dev): {str(e)}")
    
    print()
    print("=" * 50)
    print("üèÅ TESTES CONCLU√çDOS")
    print("=" * 50)

if __name__ == "__main__":
    asyncio.run(test_gestaods_api()) 