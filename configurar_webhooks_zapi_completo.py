#!/usr/bin/env python3
"""
üîß CONFIGURADOR COMPLETO DE WEBHOOKS Z-API
Configura todos os 5 tipos de webhooks necess√°rios para o chatbot funcionar perfeitamente
"""

import requests
import json
import os
from datetime import datetime

# Configura√ß√µes do Z-API
ZAPI_INSTANCE_ID = os.getenv("ZAPI_INSTANCE_ID", "")
ZAPI_TOKEN = os.getenv("ZAPI_TOKEN", "")
ZAPI_CLIENT_TOKEN = os.getenv("ZAPI_CLIENT_TOKEN", "")

# URL base do seu servidor (ajuste conforme necess√°rio)
BASE_URL = "https://chatbot-clincia.vercel.app"  # Ajuste para sua URL real

# URLs dos webhooks
WEBHOOK_URLS = {
    "ao_enviar": f"{BASE_URL}/webhook/status",
    "ao_desconectar": f"{BASE_URL}/webhook/connected", 
    "receber_status": f"{BASE_URL}/webhook/status",
    "ao_receber": f"{BASE_URL}/webhook/message",
    "ao_conectar": f"{BASE_URL}/webhook/connected"
}

def test_webhook_endpoints():
    """Testa se todos os endpoints dos webhooks est√£o funcionando"""
    print("üß™ TESTANDO ENDPOINTS DOS WEBHOOKS...")
    
    endpoints_to_test = [
        ("/", "Health Check"),
        ("/webhook", "Webhook Principal"),
        ("/webhook/message", "Webhook Mensagens"),
        ("/webhook/status", "Webhook Status"),
        ("/webhook/connected", "Webhook Conex√£o"),
        ("/webhook/health", "Webhook Health")
    ]
    
    for endpoint, description in endpoints_to_test:
        try:
            url = f"{BASE_URL}{endpoint}"
            response = requests.get(url, timeout=10)
            status = "‚úÖ" if response.status_code == 200 else "‚ùå"
            print(f"{status} {description}: {response.status_code} - {url}")
        except Exception as e:
            print(f"‚ùå {description}: ERRO - {str(e)}")

def configure_webhook_zapi(webhook_type, webhook_url):
    """Configura um webhook espec√≠fico no Z-API"""
    
    # Headers necess√°rios para a API do Z-API
    headers = {
        "Content-Type": "application/json",
        "Client-Token": ZAPI_CLIENT_TOKEN
    }
    
    # URL da API do Z-API para configurar webhooks
    api_url = f"https://api.z-api.io/instances/{ZAPI_INSTANCE_ID}/token/{ZAPI_TOKEN}/webhook"
    
    # Dados para configurar o webhook
    webhook_data = {
        "url": webhook_url,
        "enabled": True
    }
    
    try:
        print(f"üîß Configurando webhook '{webhook_type}'...")
        print(f"   URL: {webhook_url}")
        
        response = requests.post(api_url, headers=headers, json=webhook_data, timeout=30)
        
        if response.status_code == 200:
            print(f"‚úÖ Webhook '{webhook_type}' configurado com sucesso!")
            return True
        else:
            print(f"‚ùå Erro ao configurar webhook '{webhook_type}': {response.status_code}")
            print(f"   Resposta: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao configurar webhook '{webhook_type}': {str(e)}")
        return False

def get_current_webhooks():
    """Obt√©m a configura√ß√£o atual dos webhooks no Z-API"""
    
    headers = {
        "Content-Type": "application/json",
        "Client-Token": ZAPI_CLIENT_TOKEN
    }
    
    api_url = f"https://api.z-api.io/instances/{ZAPI_INSTANCE_ID}/token/{ZAPI_TOKEN}/webhook"
    
    try:
        response = requests.get(api_url, headers=headers, timeout=30)
        
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå Erro ao obter webhooks atuais: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro ao obter webhooks atuais: {str(e)}")
        return None

def configure_all_webhooks():
    """Configura todos os webhooks necess√°rios"""
    
    print("üöÄ CONFIGURANDO TODOS OS WEBHOOKS DO Z-API")
    print("=" * 60)
    
    # Primeiro, testar se os endpoints est√£o funcionando
    test_webhook_endpoints()
    print()
    
    # Verificar webhooks atuais
    print("üìã VERIFICANDO CONFIGURA√á√ÉO ATUAL...")
    current_webhooks = get_current_webhooks()
    if current_webhooks:
        print(f"Webhooks atuais: {json.dumps(current_webhooks, indent=2)}")
    print()
    
    # Configurar cada webhook
    success_count = 0
    total_webhooks = len(WEBHOOK_URLS)
    
    for webhook_type, webhook_url in WEBHOOK_URLS.items():
        print(f"üîß Configurando: {webhook_type.upper()}")
        print(f"   URL: {webhook_url}")
        
        if configure_webhook_zapi(webhook_type, webhook_url):
            success_count += 1
        
        print("-" * 40)
    
    # Resumo final
    print("üìä RESUMO DA CONFIGURA√á√ÉO")
    print("=" * 60)
    print(f"‚úÖ Webhooks configurados com sucesso: {success_count}/{total_webhooks}")
    
    if success_count == total_webhooks:
        print("üéâ TODOS OS WEBHOOKS FORAM CONFIGURADOS COM SUCESSO!")
    else:
        print("‚ö†Ô∏è  Alguns webhooks n√£o puderam ser configurados. Verifique os erros acima.")
    
    return success_count == total_webhooks

def generate_webhook_config_guide():
    """Gera um guia manual para configurar webhooks no painel Z-API"""
    
    print("\nüìñ GUIA MANUAL PARA CONFIGURAR WEBHOOKS NO PAINEL Z-API")
    print("=" * 70)
    
    guide = f"""
üîß CONFIGURA√á√ÉO MANUAL NO PAINEL Z-API

1Ô∏è‚É£ Acesse: https://app.z-api.io/
2Ô∏è‚É£ Fa√ßa login na sua conta
3Ô∏è‚É£ V√° para "Inst√¢ncias"
4Ô∏è‚É£ Clique na inst√¢ncia: {ZAPI_INSTANCE_ID}
5Ô∏è‚É£ V√° para a aba "Webhook" ou "Configura√ß√µes"

üìã CONFIGURAR OS 5 WEBHOOKS:

‚úÖ AO ENVIAR:
   URL: {WEBHOOK_URLS['ao_enviar']}
   Descri√ß√£o: Recebe confirma√ß√£o quando uma mensagem √© enviada

‚úÖ AO DESCONECTAR:
   URL: {WEBHOOK_URLS['ao_desconectar']}
   Descri√ß√£o: Recebe notifica√ß√£o quando o WhatsApp √© desconectado

‚úÖ RECEBER STATUS DA MENSAGEM:
   URL: {WEBHOOK_URLS['receber_status']}
   Descri√ß√£o: Recebe status de entrega, leitura, etc.

‚úÖ AO RECEBER:
   URL: {WEBHOOK_URLS['ao_receber']}
   Descri√ß√£o: Recebe mensagens enviadas pelos clientes

‚úÖ AO CONECTAR:
   URL: {WEBHOOK_URLS['ao_conectar']}
   Descri√ß√£o: Recebe notifica√ß√£o quando o WhatsApp √© conectado

‚öôÔ∏è CONFIGURA√á√ïES ADICIONAIS:
   ‚úÖ Ativar "Notificar as enviadas por mim tamb√©m"
   ‚úÖ Ativar todos os eventos
   ‚úÖ Salvar configura√ß√µes

üß™ TESTE AP√ìS CONFIGURA√á√ÉO:
   1. Envie uma mensagem para o WhatsApp da cl√≠nica
   2. Verifique se o webhook recebe a notifica√ß√£o
   3. Verifique se a resposta √© enviada automaticamente
"""
    
    print(guide)

def main():
    """Fun√ß√£o principal"""
    
    print("ü§ñ CONFIGURADOR DE WEBHOOKS Z-API - CHATBOT CL√çNICA")
    print("=" * 60)
    print(f"üìÖ Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print(f"üè• Cl√≠nica: Gabriela Nassif")
    print(f"üì± Instance ID: {ZAPI_INSTANCE_ID}")
    print(f"üåê URL Base: {BASE_URL}")
    print("=" * 60)
    
    # Perguntar se quer configurar automaticamente ou manualmente
    print("\nEscolha uma op√ß√£o:")
    print("1Ô∏è‚É£ - Configurar automaticamente via API")
    print("2Ô∏è‚É£ - Gerar guia manual para configurar no painel")
    print("3Ô∏è‚É£ - Testar apenas os endpoints")
    
    try:
        opcao = input("\nDigite sua op√ß√£o (1, 2 ou 3): ").strip()
        
        if opcao == "1":
            success = configure_all_webhooks()
            if success:
                print("\nüéâ CONFIGURA√á√ÉO AUTOM√ÅTICA CONCLU√çDA!")
                print("Seu chatbot est√° pronto para receber mensagens!")
            else:
                print("\n‚ö†Ô∏è  Use o guia manual para configurar os webhooks restantes.")
                generate_webhook_config_guide()
                
        elif opcao == "2":
            generate_webhook_config_guide()
            
        elif opcao == "3":
            test_webhook_endpoints()
            
        else:
            print("‚ùå Op√ß√£o inv√°lida!")
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Configura√ß√£o interrompida pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {str(e)}")

if __name__ == "__main__":
    main() 