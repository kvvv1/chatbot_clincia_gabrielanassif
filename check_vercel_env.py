#!/usr/bin/env python3
"""
Script para verificar se as vari√°veis de ambiente est√£o configuradas no Vercel
"""

import os
import subprocess
import sys

def run_command(command):
    """Executa um comando e retorna o resultado"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def check_vercel_env():
    """Verifica as vari√°veis de ambiente no Vercel"""
    
    # Vari√°veis obrigat√≥rias
    required_vars = [
        "ZAPI_INSTANCE_ID",
        "ZAPI_TOKEN", 
        "ZAPI_CLIENT_TOKEN",
        "CLINIC_NAME",
        "CLINIC_PHONE",
        "SUPABASE_URL",
        "SUPABASE_ANON_KEY",
        "SUPABASE_SERVICE_ROLE_KEY",
        "GESTAODS_API_URL",
        "GESTAODS_TOKEN",
        "ENVIRONMENT",
        "DEBUG"
    ]
    
    print("üîç Verificando vari√°veis de ambiente no Vercel...")
    print("=" * 50)
    
    # Verificar se est√° logado
    success, stdout, stderr = run_command("vercel whoami")
    if not success:
        print("‚ùå N√£o est√° logado no Vercel")
        print("Execute: vercel login")
        return False
    
    print(f"‚úÖ Logado como: {stdout.strip()}")
    
    # Listar vari√°veis de ambiente
    success, stdout, stderr = run_command("vercel env ls")
    if not success:
        print("‚ùå Erro ao listar vari√°veis de ambiente")
        print(stderr)
        return False
    
    print("\nüìã Vari√°veis configuradas:")
    print(stdout)
    
    # Verificar vari√°veis obrigat√≥rias
    print("\nüîç Verificando vari√°veis obrigat√≥rias:")
    missing_vars = []
    
    for var in required_vars:
        if var in stdout:
            print(f"‚úÖ {var}")
        else:
            print(f"‚ùå {var} - FALTANDO")
            missing_vars.append(var)
    
    if missing_vars:
        print(f"\n‚ùå {len(missing_vars)} vari√°veis est√£o faltando:")
        for var in missing_vars:
            print(f"   - {var}")
        
        print("\nüìù Para configurar, execute:")
        print("   python vercel_setup_env.py")
        return False
    else:
        print("\n‚úÖ Todas as vari√°veis obrigat√≥rias est√£o configuradas!")
        return True

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Verificador de Vari√°veis de Ambiente Vercel")
    print("=" * 50)
    
    # Verificar Vercel CLI
    success, stdout, stderr = run_command("vercel --version")
    if not success:
        print("‚ùå Vercel CLI n√£o encontrado!")
        print("Instale com: npm i -g vercel")
        sys.exit(1)
    
    print(f"‚úÖ Vercel CLI: {stdout.strip()}")
    
    # Verificar vari√°veis
    if check_vercel_env():
        print("\nüéâ Tudo configurado! Fa√ßa um deploy:")
        print("   vercel --prod")
    else:
        print("\n‚ö†Ô∏è  Configure as vari√°veis antes de fazer deploy")

if __name__ == "__main__":
    main() 