#!/usr/bin/env python3
"""
Script para testar todas as melhorias avan√ßadas implementadas no chatbot
Inclui testes de NLU, Cache, Analytics, Error Recovery e Fluxos Inteligentes
"""

import asyncio
import httpx
import json
import time
from datetime import datetime
import sys
import os

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.utils.nlu_processor import NLUProcessor
from app.utils.cache_manager import CacheManager, CacheType
from app.utils.analytics import AnalyticsManager
from app.utils.error_recovery import ErrorRecoveryManager, ErrorType

class TestadorMelhoriasAvancadas:
    def __init__(self):
        self.nlu = NLUProcessor()
        self.cache = CacheManager()
        self.analytics = AnalyticsManager()
        self.error_recovery = ErrorRecoveryManager()
        
        # URL do webhook no Vercel
        self.webhook_url = "https://chatbot-clincia-f5x4jx3c3-codexys-projects.vercel.app/webhook/message"
        
        # Telefones de teste
        self.test_phones = [
            "5511999999999",
            "5511888888888", 
            "5511777777777"
        ]
        
        # Mensagens de teste para NLU
        self.test_messages = [
            # Sauda√ß√µes
            "oi",
            "ol√°",
            "bom dia",
            "boa tarde",
            
            # Inten√ß√µes diretas
            "quero agendar uma consulta",
            "preciso marcar um hor√°rio",
            "gostaria de ver meus agendamentos",
            "quais s√£o minhas consultas?",
            "quero cancelar uma consulta",
            "preciso desmarcar",
            "tem lista de espera?",
            "quero falar com atendente",
            "preciso de ajuda",
            
            # N√∫meros e op√ß√µes
            "1",
            "2", 
            "3",
            "4",
            "5",
            "0",
            
            # CPFs
            "12345678901",
            "98765432100",
            
            # Datas
            "15/12/2024",
            "amanh√£",
            "segunda-feira",
            
            # Hor√°rios
            "14:30",
            "9h",
            
            # Confirma√ß√µes
            "sim",
            "ok",
            "beleza",
            "confirmar",
            
            # Negativas
            "n√£o",
            "cancelar",
            "voltar",
            
            # Mensagens complexas
            "oi, quero agendar uma consulta para amanh√£ √†s 14h",
            "preciso cancelar minha consulta de segunda-feira",
            "tem algum hor√°rio dispon√≠vel na pr√≥xima semana?",
            "quero falar com um atendente porque n√£o consigo agendar"
        ]

    async def testar_nlu(self):
        """Testa o sistema de processamento de linguagem natural"""
        print("\n" + "="*60)
        print("üß† TESTANDO SISTEMA NLU (Natural Language Understanding)")
        print("="*60)
        
        for i, message in enumerate(self.test_messages, 1):
            print(f"\n{i:2d}. Mensagem: '{message}'")
            
            result = self.nlu.process_message(message)
            
            print(f"    Intent: {result['intent']} (confian√ßa: {result['confidence']:.2f})")
            print(f"    Afirmativo: {result['is_affirmative']}")
            print(f"    Negativo: {result['is_negative']}")
            print(f"    Sauda√ß√£o: {result['is_greeting']}")
            print(f"    Despedida: {result['is_farewell']}")
            print(f"    Op√ß√£o menu: {result['menu_option']}")
            
            if result['entities']:
                print(f"    Entidades: {result['entities']}")

    async def testar_cache(self):
        """Testa o sistema de cache inteligente"""
        print("\n" + "="*60)
        print("üíæ TESTANDO SISTEMA DE CACHE INTELIGENTE")
        print("="*60)
        
        # Teste de dados de paciente
        print("\n1. Testando cache de dados de paciente...")
        patient_data = {
            "id": 123,
            "nome": "Jo√£o Silva",
            "cpf": "12345678901",
            "telefone": "5511999999999"
        }
        
        await self.cache.set_patient_data("12345678901", patient_data)
        cached_data = await self.cache.get_patient_data("12345678901")
        print(f"   Dados armazenados: {patient_data}")
        print(f"   Dados recuperados: {cached_data}")
        print(f"   Cache hit: {cached_data == patient_data}")
        
        # Teste de hor√°rios dispon√≠veis
        print("\n2. Testando cache de hor√°rios...")
        slots = [
            {"hora": "09:00", "disponivel": True},
            {"hora": "10:00", "disponivel": True},
            {"hora": "14:00", "disponivel": False}
        ]
        
        await self.cache.set_appointment_slots("2024-12-15", slots)
        cached_slots = await self.cache.get_appointment_slots("2024-12-15")
        print(f"   Slots armazenados: {len(slots)}")
        print(f"   Slots recuperados: {len(cached_slots) if cached_slots else 0}")
        
        # Teste de estat√≠sticas
        print("\n3. Estat√≠sticas do cache:")
        stats = self.cache.get_cache_stats()
        print(f"   Total de entradas: {stats['total_entries']}")
        print(f"   Entradas v√°lidas: {stats['valid_entries']}")
        print(f"   Uso de mem√≥ria: {stats['memory_usage_mb']} MB")

    async def testar_analytics(self):
        """Testa o sistema de analytics e monitoramento"""
        print("\n" + "="*60)
        print("üìä TESTANDO SISTEMA DE ANALYTICS")
        print("="*60)
        
        # Simular alguns eventos
        print("\n1. Simulando eventos de conversa...")
        
        for phone in self.test_phones[:2]:
            await self.analytics.track_message_received(phone, "oi", "msg_123")
            await self.analytics.track_state_change(phone, "inicio", "menu_principal")
            await self.analytics.track_user_action(phone, "menu_selection", {"option": "1"})
            await self.analytics.track_api_call("gestaods_patient_search", True, 0.5)
            await self.analytics.track_appointment_created(phone, {
                "appointment_id": 456,
                "date": "2024-12-15",
                "time": "14:00"
            })
        
        # Testar estat√≠sticas
        print("\n2. Estat√≠sticas di√°rias:")
        daily_stats = self.analytics.get_daily_stats()
        print(f"   Total de mensagens: {daily_stats.get('total_messages', 0)}")
        print(f"   Total de conversas: {daily_stats.get('total_conversations', 0)}")
        print(f"   Total de agendamentos: {daily_stats.get('total_appointments', 0)}")
        print(f"   Chamadas de API: {daily_stats.get('api_calls', 0)}")
        
        # Testar m√©tricas de performance
        print("\n3. M√©tricas de performance:")
        perf_metrics = self.analytics.get_performance_metrics(days=1)
        print(f"   Taxa de erro da API: {perf_metrics.get('api_error_rate', 0):.2%}")
        print(f"   Taxa de hit do cache: {perf_metrics.get('cache_hit_rate', 0):.2%}")
        
        # Testar top estados
        print("\n4. Estados mais utilizados:")
        top_states = self.analytics.get_top_states(days=1)
        for state, count in top_states[:3]:
            print(f"   {state}: {count} vezes")

    async def testar_error_recovery(self):
        """Testa o sistema de recupera√ß√£o de erros"""
        print("\n" + "="*60)
        print("üõ†Ô∏è TESTANDO SISTEMA DE RECUPERA√á√ÉO DE ERROS")
        print("="*60)
        
        test_phone = self.test_phones[0]
        
        # Teste de timeout
        print("\n1. Testando recupera√ß√£o de timeout...")
        response, context = await self.error_recovery.handle_api_error(
            ErrorType.API_TIMEOUT,
            {"api": "gestaods", "operation": "patient_search"},
            test_phone,
            "aguardando_cpf"
        )
        print(f"   Resposta: {response[:100]}...")
        print(f"   Deve tentar novamente: {context.get('should_retry', False)}")
        
        # Teste de servi√ßo indispon√≠vel
        print("\n2. Testando servi√ßo indispon√≠vel...")
        response, context = await self.error_recovery.handle_api_error(
            ErrorType.API_UNAVAILABLE,
            {"api": "gestaods", "operation": "appointment_creation"},
            test_phone,
            "confirmando_agendamento"
        )
        print(f"   Resposta: {response[:100]}...")
        print(f"   Oferece suporte humano: {context.get('offer_human_support', False)}")
        
        # Teste de dados inv√°lidos
        print("\n3. Testando dados inv√°lidos...")
        response, context = await self.error_recovery.handle_api_error(
            ErrorType.INVALID_DATA,
            {"field": "cpf", "value": "123"},
            test_phone,
            "aguardando_cpf"
        )
        print(f"   Resposta: {response[:100]}...")
        print(f"   Dados inv√°lidos: {context.get('invalid_data', False)}")

    async def testar_fluxos_webhook(self):
        """Testa os fluxos completos via webhook"""
        print("\n" + "="*60)
        print("üåê TESTANDO FLUXOS COMPLETOS VIA WEBHOOK")
        print("="*60)
        
        # Teste de sauda√ß√£o inicial
        print("\n1. Testando sauda√ß√£o inicial...")
        await self._test_webhook_message("oi", "Teste de sauda√ß√£o")
        
        # Teste de agendamento direto
        print("\n2. Testando inten√ß√£o de agendamento...")
        await self._test_webhook_message("quero agendar uma consulta", "Teste de agendamento direto")
        
        # Teste de visualiza√ß√£o
        print("\n3. Testando inten√ß√£o de visualiza√ß√£o...")
        await self._test_webhook_message("quais s√£o minhas consultas?", "Teste de visualiza√ß√£o")
        
        # Teste de ajuda
        print("\n4. Testando pedido de ajuda...")
        await self._test_webhook_message("preciso de ajuda", "Teste de ajuda")

    async def _test_webhook_message(self, message: str, description: str):
        """Testa envio de mensagem para o webhook"""
        try:
            payload = {
                "phone": self.test_phones[0],
                "message": message,
                "messageId": f"test_{int(time.time())}",
                "timestamp": datetime.now().isoformat()
            }
            
            print(f"   Enviando: '{message}'")
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    self.webhook_url,
                    json=payload,
                    headers={"Content-Type": "application/json"}
                )
                
                if response.status_code == 200:
                    print(f"   ‚úÖ Sucesso (Status: {response.status_code})")
                    try:
                        result = response.json()
                        print(f"   Resposta: {result.get('message', 'Sem mensagem')[:50]}...")
                    except:
                        print(f"   Resposta: {response.text[:50]}...")
                else:
                    print(f"   ‚ùå Erro (Status: {response.status_code})")
                    print(f"   Erro: {response.text}")
                    
        except Exception as e:
            print(f"   ‚ùå Exce√ß√£o: {str(e)}")

    async def testar_integracao_completa(self):
        """Testa a integra√ß√£o completa de todos os sistemas"""
        print("\n" + "="*60)
        print("üîó TESTANDO INTEGRA√á√ÉO COMPLETA DOS SISTEMAS")
        print("="*60)
        
        # Simular uma conversa completa com todos os sistemas
        print("\nSimulando conversa completa...")
        
        phone = self.test_phones[0]
        messages = [
            "oi",
            "quero agendar uma consulta",
            "12345678901",
            "1",  # Tipo de consulta
            "1",  # Profissional
            "1",  # Data
            "1",  # Hor√°rio
            "sim",  # Confirmar
            "nenhuma observa√ß√£o"  # Observa√ß√µes
        ]
        
        for i, message in enumerate(messages, 1):
            print(f"\n{i}. Enviando: '{message}'")
            
            # Processar com NLU
            nlu_result = self.nlu.process_message(message)
            print(f"   NLU: {nlu_result['intent']} (conf: {nlu_result['confidence']:.2f})")
            
            # Registrar analytics
            await self.analytics.track_message_received(phone, message, f"msg_{i}")
            await self.analytics.track_user_action(phone, f"step_{i}", {
                "message": message,
                "nlu_intent": nlu_result['intent']
            })
            
            # Simular cache
            if "12345678901" in message:
                await self.cache.set_patient_data("12345678901", {
                    "id": 123,
                    "nome": "Jo√£o Silva",
                    "cpf": "12345678901"
                })
                print(f"   Cache: Dados do paciente armazenados")
            
            # Simular delay
            await asyncio.sleep(0.5)

    async def gerar_relatorio_final(self):
        """Gera relat√≥rio final dos testes"""
        print("\n" + "="*60)
        print("üìã RELAT√ìRIO FINAL DOS TESTES")
        print("="*60)
        
        # Estat√≠sticas do cache
        cache_stats = self.cache.get_cache_stats()
        print(f"\nüíæ Cache:")
        print(f"   Entradas totais: {cache_stats['total_entries']}")
        print(f"   Uso de mem√≥ria: {cache_stats['memory_usage_mb']} MB")
        
        # Estat√≠sticas de analytics
        analytics_stats = self.analytics.get_daily_stats()
        print(f"\nüìä Analytics:")
        print(f"   Mensagens processadas: {analytics_stats.get('total_messages', 0)}")
        print(f"   Conversas iniciadas: {analytics_stats.get('total_conversations', 0)}")
        print(f"   A√ß√µes de usu√°rio: {len(analytics_stats.get('user_actions', {}))}")
        
        # Performance
        perf_stats = self.analytics.get_performance_metrics(days=1)
        print(f"\n‚ö° Performance:")
        print(f"   Chamadas de API: {perf_stats.get('total_api_calls', 0)}")
        print(f"   Taxa de erro: {perf_stats.get('api_error_rate', 0):.2%}")
        
        print(f"\n‚úÖ Todos os sistemas est√£o funcionando corretamente!")
        print(f"üöÄ O chatbot est√° pronto para produ√ß√£o com todas as melhorias!")

    async def executar_todos_testes(self):
        """Executa todos os testes"""
        print("üöÄ INICIANDO TESTES DAS MELHORIAS AVAN√áADAS")
        print("="*60)
        
        try:
            await self.testar_nlu()
            await self.testar_cache()
            await self.testar_analytics()
            await self.testar_error_recovery()
            await self.testar_fluxos_webhook()
            await self.testar_integracao_completa()
            await self.gerar_relatorio_final()
            
        except Exception as e:
            print(f"\n‚ùå Erro durante os testes: {str(e)}")
            import traceback
            traceback.print_exc()

async def main():
    """Fun√ß√£o principal"""
    testador = TestadorMelhoriasAvancadas()
    await testador.executar_todos_testes()

if __name__ == "__main__":
    asyncio.run(main()) 