#!/usr/bin/env python3
"""
Script para testar o deployment de produ√ß√£o ap√≥s configura√ß√£o das vari√°veis de ambiente
"""

import requests
import json
import sys
import os

def test_endpoint(base_url, endpoint, description):
    """Testa um endpoint espec√≠fico"""
    try:
        url = f"{base_url}{endpoint}"
        print(f"\nüîç Testando {description}...")
        print(f"URL: {url}")
        
        response = requests.get(url, timeout=30)
        
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print(f"‚úÖ Sucesso: {json.dumps(data, indent=2, ensure_ascii=False)}")
                return True
            except:
                print(f"‚úÖ Sucesso: {response.text}")
                return True
        else:
            print(f"‚ùå Erro {response.status_code}: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def main():
    # URL base do deployment de produ√ß√£o
    base_url = "https://chatbot-clinica.vercel.app"
    
    print("üöÄ Testando deployment de produ√ß√£o...")
    print(f"Base URL: {base_url}")
    print("=" * 60)
    
    # Lista de endpoints para testar
    endpoints = [
        ("/", "Root endpoint - Status b√°sico"),
        ("/health", "Health check - Verifica√ß√£o de sa√∫de"),
        ("/test", "Test endpoint - Endpoint de teste"),
        ("/debug", "Debug endpoint - Informa√ß√µes de debug"),
        ("/dashboard/status", "Dashboard status - Status do dashboard"),
        ("/dashboard/test", "Dashboard test - Teste do dashboard"),
        ("/dashboard/supabase/test", "Supabase test - Teste de conex√£o com Supabase"),
        ("/webhook/test", "Webhook test - Teste do webhook"),
    ]
    
    results = []
    
    for endpoint, description in endpoints:
        success = test_endpoint(base_url, endpoint, description)
        results.append((endpoint, success))
        print("-" * 40)
    
    # Resumo dos resultados
    print("\n" + "="*60)
    print("üìä RESUMO DOS TESTES DE PRODU√á√ÉO")
    print("="*60)
    
    passed = sum(1 for _, success in results if success)
    total = len(results)
    
    for endpoint, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status}: {endpoint}")
    
    print(f"\nResultado: {passed}/{total} endpoints funcionando")
    
    if passed == total:
        print("üéâ PARAB√âNS! Todos os endpoints est√£o funcionando!")
        print("‚úÖ Seu chatbot est√° pronto para produ√ß√£o!")
        return 0
    elif passed >= total * 0.7:
        print("‚ö†Ô∏è  A maioria dos endpoints est√° funcionando. Verifique os que falharam.")
        return 1
    else:
        print("‚ùå Muitos endpoints falharam. Verifique a configura√ß√£o no Vercel.")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 