from datetime import datetime
from typing import List, Dict, Optional
import locale

# Tentar configurar locale para portugu√™s
try:
    locale.setlocale(locale.LC_TIME, 'pt_BR.UTF-8')
except:
    try:
        locale.setlocale(locale.LC_TIME, 'Portuguese_Brazil.1252')
    except:
        pass

class FormatterUtils:
    """Utilidades para formata√ß√£o de mensagens"""
    
    @staticmethod
    def formatar_saudacao() -> str:
        """Retorna sauda√ß√£o baseada no hor√°rio"""
        hora = datetime.now().hour
        
        if 6 <= hora < 12:
            return "üåÖ Bom dia!"
        elif 12 <= hora < 18:
            return "‚òÄÔ∏è Boa tarde!"
        else:
            return "üåô Boa noite!"
    
    @staticmethod
    def formatar_data_brasil(data: datetime) -> str:
        """Formata data no padr√£o brasileiro"""
        dias_semana = {
            0: 'Segunda-feira',
            1: 'Ter√ßa-feira',
            2: 'Quarta-feira',
            3: 'Quinta-feira',
            4: 'Sexta-feira',
            5: 'S√°bado',
            6: 'Domingo'
        }
        
        meses = {
            1: 'janeiro', 2: 'fevereiro', 3: 'mar√ßo', 4: 'abril',
            5: 'maio', 6: 'junho', 7: 'julho', 8: 'agosto',
            9: 'setembro', 10: 'outubro', 11: 'novembro', 12: 'dezembro'
        }
        
        dia_semana = dias_semana[data.weekday()]
        return f"{dia_semana}, {data.day} de {meses[data.month]} de {data.year}"
    
    @staticmethod
    def formatar_hora_brasil(data: datetime) -> str:
        """Formata hora no padr√£o brasileiro"""
        return data.strftime("%H:%M")
    
    @staticmethod
    def formatar_menu_principal() -> str:
        """Retorna menu principal formatado"""
        return """
*Digite o n√∫mero da op√ß√£o desejada:*

1Ô∏è‚É£ *Agendar consulta*
2Ô∏è‚É£ *Ver meus agendamentos*  
3Ô∏è‚É£ *Cancelar consulta*
4Ô∏è‚É£ *Lista de espera*
5Ô∏è‚É£ *Falar com atendente*

Digite *0* para sair
"""
    
    @staticmethod
    def formatar_lista_agendamentos(agendamentos: List[Dict]) -> str:
        """Formata lista de agendamentos"""
        if not agendamentos:
            return "üìÖ Voc√™ n√£o possui agendamentos."
        
        mensagem = "üìÖ *Seus agendamentos:*\n\n"
        
        for i, ag in enumerate(agendamentos[:5], 1):
            try:
                # Tentar diferentes formatos de data
                data_str = ag.get('data_hora', ag.get('data', ''))
                
                if 'T' in data_str:
                    data = datetime.fromisoformat(data_str.replace('Z', '+00:00'))
                elif ' ' in data_str:
                    data = datetime.strptime(data_str, "%d/%m/%Y %H:%M:%S")
                else:
                    data = datetime.strptime(data_str, "%Y-%m-%d")
                
                mensagem += f"*{i}.* {FormatterUtils.formatar_data_brasil(data)}\n"
                mensagem += f"   ‚è∞ {FormatterUtils.formatar_hora_brasil(data)}\n"
                mensagem += f"   üë©‚Äç‚öïÔ∏è {ag.get('profissional', 'Dra. Gabriela Nassif')}\n"
                mensagem += f"   üìã {ag.get('tipo', 'Consulta m√©dica')}\n"
                mensagem += f"   ‚úÖ Status: {ag.get('status', 'Confirmado')}\n\n"
                
            except Exception as e:
                continue
        
        return mensagem
    
    @staticmethod
    def formatar_mensagem_agendamento(paciente: Dict, data_hora: datetime, 
                                    horario: str, profissional: str) -> str:
        """Formata mensagem de confirma√ß√£o de agendamento"""
        return f"""
‚úÖ *Agendamento confirmado com sucesso!*

üìã *Detalhes da consulta:*
üë§ Paciente: {paciente.get('nome', 'Paciente')}
üìÖ Data: {FormatterUtils.formatar_data_brasil(data_hora)}
‚è∞ Hor√°rio: {horario}
üë©‚Äç‚öïÔ∏è Profissional: {profissional}

üìç *Endere√ßo:*
Cl√≠nica Gabriela Nassif
Rua Example, 123 - Savassi
Belo Horizonte - MG

üí° *Lembretes importantes:*
‚Ä¢ Chegue com 15 minutos de anteced√™ncia
‚Ä¢ Traga documento com foto e cart√£o do conv√™nio (se houver)
‚Ä¢ Em caso de sintomas gripais, use m√°scara
‚Ä¢ Para cancelar ou reagendar, entre em contato com anteced√™ncia

üìû *Contato:*
Telefone: (31) 9999-9999
WhatsApp: (31) 99999-9999

Agradecemos a confian√ßa! üòä
"""
    
    @staticmethod
    def formatar_erro_sistema() -> str:
        """Mensagem de erro do sistema"""
        return """
‚ö†Ô∏è *Ops! Algo deu errado*

Estamos com uma instabilidade tempor√°ria no sistema.

Por favor, tente novamente em alguns instantes ou entre em contato:

üìû Telefone: (31) 9999-9999
üìß Email: contato@clinica.com.br

Pedimos desculpas pelo transtorno! üôè
"""
    
    @staticmethod
    def formatar_lista_espera_confirmacao() -> str:
        """Mensagem de confirma√ß√£o de lista de espera"""
        return """
‚úÖ *Voc√™ foi adicionado √† lista de espera!*

üìã Assim que surgir uma vaga dispon√≠vel, entraremos em contato pelo WhatsApp.

‚è∞ *Importante:*
‚Ä¢ Mantenha seu WhatsApp ativo
‚Ä¢ Responda rapidamente quando entrarmos em contato
‚Ä¢ A vaga ser√° oferecida por ordem de chegada

üí° *Dica:* Voc√™ tamb√©m pode ligar para verificar se surgiram vagas:
üìû (31) 9999-9999

Obrigado pela paci√™ncia! üôè
"""
    
    @staticmethod
    def formatar_cancelamento_confirmado() -> str:
        """Mensagem de cancelamento confirmado"""
        return """
‚úÖ *Consulta cancelada com sucesso!*

Sua consulta foi cancelada conforme solicitado.

Caso deseje reagendar, estamos √† disposi√ß√£o:
‚Ä¢ Digite *1* para agendar nova consulta
‚Ä¢ Digite *0* para sair

Esperamos v√™-lo em breve! üòä
"""
    
    @staticmethod
    def truncar_texto(texto: str, max_chars: int = 50) -> str:
        """Trunca texto longo adicionando retic√™ncias"""
        if len(texto) <= max_chars:
            return texto
        return texto[:max_chars-3] + "..."
    
    @staticmethod
    def formatar_tempo_espera(minutos: int) -> str:
        """Formata tempo de espera em formato leg√≠vel"""
        if minutos < 60:
            return f"{minutos} minutos"
        
        horas = minutos // 60
        mins = minutos % 60
        
        if mins == 0:
            return f"{horas} hora{'s' if horas > 1 else ''}"
        
        return f"{horas} hora{'s' if horas > 1 else ''} e {mins} minutos"