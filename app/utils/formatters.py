from datetime import datetime
from typing import List, Dict

class FormatterUtils:
    
    @staticmethod
    def formatar_data_brasil(data: datetime) -> str:
        """Formata data para padr√£o brasileiro"""
        return data.strftime("%d/%m/%Y")
    
    @staticmethod
    def formatar_hora_brasil(data: datetime) -> str:
        """Formata hora para padr√£o brasileiro"""
        return data.strftime("%H:%M")
    
    @staticmethod
    def formatar_data_hora_brasil(data: datetime) -> str:
        """Formata data e hora para padr√£o brasileiro"""
        return data.strftime("%d/%m/%Y √†s %H:%M")
    
    @staticmethod
    def get_dia_semana(data: datetime) -> str:
        """Retorna dia da semana em portugu√™s"""
        dias = {
            0: "Segunda-feira",
            1: "Ter√ßa-feira", 
            2: "Quarta-feira",
            3: "Quinta-feira",
            4: "Sexta-feira",
            5: "S√°bado",
            6: "Domingo"
        }
        return dias[data.weekday()]
    
    @staticmethod
    def formatar_mensagem_agendamento(paciente: Dict, data: datetime, horario: str, profissional: str) -> str:
        """Formata mensagem de confirma√ß√£o de agendamento"""
        return f"""
‚úÖ *Consulta agendada com sucesso!*

üìã *Detalhes do agendamento:*
üë§ Paciente: {paciente.get('nome', 'Paciente')}
üìÖ Data: {FormatterUtils.formatar_data_brasil(data)}
‚è∞ Hor√°rio: {horario}
üë®‚Äç‚öïÔ∏è Profissional: {profissional}

üìç *Endere√ßo:*
Cl√≠nica Gabriela Nassif
Rua Example, 123 - Savassi
Belo Horizonte - MG

üí° *Lembretes:*
‚Ä¢ Chegue com 15 minutos de anteced√™ncia
‚Ä¢ Traga documento com foto
‚Ä¢ Traga carteira do conv√™nio (se aplic√°vel)

Voc√™ receber√° um lembrete 24h antes da consulta.

Obrigado por escolher nossa cl√≠nica! üòä
"""
    
    @staticmethod
    def formatar_mensagem_lembrete(paciente: str, data: datetime, horario: str) -> str:
        """Formata mensagem de lembrete"""
        return f"""
üìÖ *Lembrete de Consulta*

Ol√°, {paciente}!

Este √© um lembrete da sua consulta amanh√£:

üìÜ Data: {FormatterUtils.formatar_data_brasil(data)}
‚è∞ Hor√°rio: {horario}
üìç Local: Cl√≠nica Gabriela Nassif

*Por favor, confirme sua presen√ßa:*

*1* - ‚úÖ Confirmar presen√ßa
*2* - ‚ùå N√£o poderei comparecer
*3* - üìÖ Reagendar

Digite a op√ß√£o desejada.
"""
    
    @staticmethod
    def formatar_lista_agendamentos(agendamentos: List[Dict]) -> str:
        """Formata lista de agendamentos para exibi√ß√£o"""
        if not agendamentos:
            return "üìÖ Voc√™ n√£o possui agendamentos futuros."
        
        mensagem = "üìÖ *Seus agendamentos:*\n\n"
        
        for i, ag in enumerate(agendamentos[:5], 1):  # Limitar a 5
            data = datetime.fromisoformat(ag['data_hora'])
            mensagem += (
                f"*{i}*\n"
                f"üìÜ {FormatterUtils.formatar_data_brasil(data)}\n"
                f"‚è∞ {FormatterUtils.formatar_hora_brasil(data)}\n"
                f"üë®‚Äç‚öïÔ∏è {ag.get('profissional', 'Dr(a). Gabriela')}\n"
                f"üìã Status: {ag.get('status', 'Agendado')}\n\n"
            )
        
        return mensagem
    
    @staticmethod
    def formatar_menu_principal() -> str:
        """Formata menu principal"""
        return """
üè• *Cl√≠nica Gabriela Nassif*

Como posso ajudar voc√™ hoje?

*1Ô∏è‚É£* - Agendar consulta
*2Ô∏è‚É£* - Ver meus agendamentos
*3Ô∏è‚É£* - Cancelar consulta
*4Ô∏è‚É£* - Lista de espera
*5Ô∏è‚É£* - Falar com atendente

Digite o n√∫mero da op√ß√£o desejada.
"""
    
    @staticmethod
    def formatar_saudacao() -> str:
        """Retorna sauda√ß√£o baseada no hor√°rio"""
        hora = datetime.now().hour
        
        if hora < 12:
            return "üåÖ Bom dia!"
        elif hora < 18:
            return "‚òÄÔ∏è Boa tarde!"
        else:
            return "üåô Boa noite!" 