#!/usr/bin/env python3
"""
Debug simples do problema de menu - simula l√≥gica sem banco
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Simular uma conversa para testar a l√≥gica
class MockConversation:
    def __init__(self):
        self.state = "inicio"
        self.context = {}
        
class MockDB:
    def commit(self):
        pass

class MockWhatsApp:
    async def send_text(self, phone, message):
        print(f"üì± Enviando: {message[:100]}...")
        
    async def mark_as_read(self, phone, message_id):
        pass

# Simular apenas a l√≥gica do handler de menu
async def test_menu_handler():
    print("üîç TESTE SIMPLES - L√≥gica do Menu")
    print("=" * 50)
    
    # Simular dados
    conversa = MockConversation()
    db = MockDB()
    phone = "test"
    
    print("\n1. üéØ Testando l√≥gica do handler de menu")
    
    # Simular a l√≥gica exata do _handle_menu_principal
    def test_opcao(opcao_input, nome_teste):
        print(f"\n   üìù {nome_teste}: '{opcao_input}'")
        
        opcao = opcao_input.strip()
        print(f"   üìã Op√ß√£o processada: '{opcao}'")
        
        opcoes = {
            "1": ("agendar", "aguardando_cpf", "Vamos agendar sua consulta!"),
            "2": ("visualizar", "aguardando_cpf", "Para ver seus agendamentos, preciso do seu CPF."),
            "3": ("cancelar", "aguardando_cpf", "Para cancelar uma consulta, preciso do seu CPF."),
            "4": ("lista_espera", "aguardando_cpf", "Vou adicionar voc√™ na lista de espera!"),
            "5": (None, None, "FUN√á√ÉO_CONTATO")
        }
        
        if opcao in opcoes:
            acao, novo_estado, mensagem = opcoes[opcao]
            print(f"   ‚úÖ ENCONTRADO em opcoes!")
            print(f"      - A√ß√£o: {acao}")
            print(f"      - Novo estado: {novo_estado}")
            print(f"      - Mensagem: {mensagem[:50]}...")
            
            if callable(mensagem):
                print(f"      üîß Mensagem √© fun√ß√£o - chamando...")
                conversa.state = "menu_principal"
            else:
                print(f"      üìù Mensagem √© texto - enviando...")
                conversa.state = novo_estado
                conversa.context = {"acao": acao} if acao else {}
            
            print(f"      üéØ Estado final: {conversa.state}")
            print(f"      üìã Contexto final: {conversa.context}")
            return True
        else:
            print(f"   ‚ùå N√ÉO ENCONTRADO em opcoes!")
            print(f"      Chaves dispon√≠veis: {list(opcoes.keys())}")
            print(f"      Tipo da op√ß√£o: {type(opcao)}")
            print(f"      Compara√ß√£o '1': {opcao == '1'}")
            print(f"      Compara√ß√£o '2': {opcao == '2'}")
            return False
    
    # Testar diferentes entradas
    test_opcao("1", "Op√ß√£o 1 (agendar)")
    test_opcao("2", "Op√ß√£o 2 (visualizar)")  
    test_opcao("3", "Op√ß√£o 3 (cancelar)")
    test_opcao("4", "Op√ß√£o 4 (lista)")
    test_opcao("5", "Op√ß√£o 5 (atendente)")
    test_opcao("6", "Op√ß√£o inv√°lida 6")
    test_opcao(" 1 ", "Op√ß√£o 1 com espa√ßos")
    test_opcao("abc", "Texto abc")
    
    print("\n" + "=" * 50)
    print("üéØ CONCLUS√ÉO:")
    print("Se todas as op√ß√µes 1-5 mostraram ‚úÖ ENCONTRADO,")
    print("ent√£o a l√≥gica do handler est√° correta.")
    print("O problema deve estar em outro lugar!")

# Testar tamb√©m comandos globais
def test_comandos_globais():
    print("\n\nüåê TESTE - Comandos Globais")
    print("=" * 50)
    
    def is_global_command(message):
        commands = ['sair', 'menu', 'ajuda', 'cancelar', '0']
        return message.strip().lower() in commands
    
    # Testar diferentes entradas
    entradas = ['1', '2', '3', '4', '5', 'menu', 'ajuda', '0', 'sair']
    
    for entrada in entradas:
        resultado = is_global_command(entrada)
        print(f"   '{entrada}' -> Global: {resultado}")
        
        if resultado:
            print(f"      ‚ö†Ô∏è  '{entrada}' ser√° processado como comando global!")
        else:
            print(f"      ‚úÖ '{entrada}' ser√° processado pelo handler do estado")

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_menu_handler())
    test_comandos_globais()