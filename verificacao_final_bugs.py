#!/usr/bin/env python3
"""
Verifica√ß√£o Final de Bugs - Checklist R√°pido
"""

import re
from pathlib import Path

def main():
    print("üîç VERIFICA√á√ÉO FINAL DE BUGS")
    print("=" * 50)
    
    # Ler c√≥digo
    with open("app/services/conversation.py", 'r', encoding='utf-8') as f:
        codigo = f.read()
    
    problemas_criticos = []
    avisos = []
    
    print("1. ‚úÖ CONVERS√ïES INT() PERIGOSAS:")
    int_conversions = re.findall(r'int\(message\.strip\(\)\)', codigo)
    try_blocks = codigo.count('try:')
    except_value_blocks = codigo.count('except ValueError:')
    
    if len(int_conversions) <= except_value_blocks:
        print(f"   ‚úÖ {len(int_conversions)} convers√µes int(), {except_value_blocks} except ValueError")
    else:
        print(f"   ‚ùå {len(int_conversions)} convers√µes int(), apenas {except_value_blocks} except ValueError")
        problemas_criticos.append("Convers√µes int() sem tratamento de erro")
    
    print("\n2. ‚úÖ MEMORY LEAKS NO CACHE:")
    if "conversation_cache = {}" in codigo:
        if "del self.conversation_cache[phone]" in codigo:
            print("   ‚úÖ Cache tem limpeza implementada")
        else:
            print("   ‚ùå Cache nunca √© limpo")
            problemas_criticos.append("Memory leak no cache")
    
    print("\n3. ‚úÖ ESTADOS √ìRF√ÉOS:")
    estados_definidos = set(re.findall(r'conversa\.state = "([^"]+)"', codigo))
    handlers_no_map = set(re.findall(r'"([^"]+)": self\._handle_', codigo))
    estados_orfaos = estados_definidos - handlers_no_map
    
    if not estados_orfaos:
        print(f"   ‚úÖ Todos os {len(estados_definidos)} estados t√™m handlers")
    else:
        print(f"   ‚ùå Estados √≥rf√£os: {list(estados_orfaos)}")
        problemas_criticos.append(f"Estados √≥rf√£os: {list(estados_orfaos)}")
    
    print("\n4. ‚úÖ EXCE√á√ïES N√ÉO TRATADAS:")
    if "except Exception as e:" in codigo:
        print("   ‚úÖ Tratamento de exce√ß√µes gen√©ricas implementado")
    else:
        print("   ‚ùå Nenhum tratamento de exce√ß√µes gen√©ricas")
        problemas_criticos.append("Falta tratamento de exce√ß√µes")
    
    print("\n5. ‚úÖ COMMITS SEM PERSIST√äNCIA:")
    commits = len(re.findall(r'db\.commit\(\)', codigo))
    state_changes = len(re.findall(r'conversa\.state\s*=', codigo))
    
    if commits >= state_changes * 0.8:  # 80% de coverage
        print(f"   ‚úÖ {commits} commits para {state_changes} mudan√ßas de estado")
    else:
        print(f"   ‚ö†Ô∏è {commits} commits para {state_changes} mudan√ßas de estado")
        avisos.append("Poss√≠vel falta de persist√™ncia em algumas mudan√ßas")
    
    print("\n6. ‚úÖ HANDLERS ASYNC CORRETOS:")
    async_handlers = len(re.findall(r'async def _handle_', codigo))
    total_handlers = len(re.findall(r'def _handle_', codigo))
    
    if async_handlers == total_handlers:
        print(f"   ‚úÖ Todos os {total_handlers} handlers s√£o async")
    else:
        print(f"   ‚ö†Ô∏è {async_handlers}/{total_handlers} handlers s√£o async")
        avisos.append("Alguns handlers podem n√£o ser async")
    
    print("\n7. ‚úÖ IMPORTS NECESS√ÅRIOS:")
    imports_essenciais = ['datetime', 'Session', 'logging', 'asyncio']
    imports_ok = 0
    
    for imp in imports_essenciais:
        if imp in codigo[:500]:  # Primeiras 500 linhas (imports)
            imports_ok += 1
    
    if imports_ok == len(imports_essenciais):
        print(f"   ‚úÖ Todos os {len(imports_essenciais)} imports essenciais presentes")
    else:
        print(f"   ‚ö†Ô∏è {imports_ok}/{len(imports_essenciais)} imports essenciais")
        avisos.append("Poss√≠vel falta de imports")
    
    # RESULTADO FINAL
    print("\n" + "=" * 50)
    print("üìä RESULTADO FINAL:")
    
    if not problemas_criticos:
        print("üéâ NENHUM BUG CR√çTICO ENCONTRADO!")
        
        if not avisos:
            print("‚úÖ C√≥digo est√° 100% limpo")
            print("üöÄ PRONTO PARA PRODU√á√ÉO!")
        else:
            print(f"‚ö†Ô∏è {len(avisos)} avisos encontrados:")
            for i, aviso in enumerate(avisos, 1):
                print(f"   {i}. {aviso}")
            print("üí° Avisos n√£o s√£o cr√≠ticos, mas podem ser melhorados")
        
        return True
    else:
        print(f"üö® {len(problemas_criticos)} BUGS CR√çTICOS ENCONTRADOS:")
        for i, problema in enumerate(problemas_criticos, 1):
            print(f"   {i}. {problema}")
        
        if avisos:
            print(f"\n‚ö†Ô∏è E {len(avisos)} avisos:")
            for i, aviso in enumerate(avisos, 1):
                print(f"   {i}. {aviso}")
        
        print("\nüîß CORRIJA OS BUGS CR√çTICOS ANTES DE USAR!")
        return False

if __name__ == "__main__":
    success = main()
    print(f"\n{'‚úÖ STATUS: APROVADO' if success else '‚ùå STATUS: REPROVADO'}")